/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package csmserver;

import command.Commands;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import structure.MyProcess;
import structure.define;

/**
 *
 * @author Mr.Tran
 */
public class ProcessListGui extends javax.swing.JFrame {

    /**
     * Creates new form ProcessListGui
     */
    private Vector<MyProcess> listproc;
    private InetAddress ipclient;
    private int row = -1;
    private String pidnum;
    private DefaultTableModel model;
    public ProcessListGui(InetAddress ip, Vector<MyProcess> lstproc) {
        initComponents();
        listproc = lstproc;
        ipclient = ip;
        model = (DefaultTableModel) proctable.getModel();
        model.setNumRows(0);
        for(int i=0; i<listproc.size(); i++)
        {
            String procname = listproc.get(i).getImagename();
            String pid = listproc.get(i).getPid();
            model.addRow(new Object[]{procname,pid});

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        proctable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        proctable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process Name", "PID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        proctable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(proctable);

        jButton1.setText("Đóng tiến trình");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(185, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MouseClick();
        System.out.println(row +" "+ pidnum);
        
        if(row == -1 || pidnum == null)
        {
            JOptionPane.showMessageDialog(null, "Chọn tiến trình để thực hiện chức năng này.");
        }
        else
        {
            if(row != -1 && pidnum != null)
            {
                try{
                    
                    Socket cmdSocket = new Socket(ipclient, define.CMD_CLIENT_PORT);

                    command.Commands cmd = new Commands(cmdSocket);
                    boolean flag = cmd.KillButton(pidnum);

                    if(flag == true)
                    {
                        String procname = (String) proctable.getValueAt(row, 0);
                        JOptionPane.showMessageDialog(null, "Tiến trình: \""+procname+ "\" được hủy thành công.");
                        //(DefaultTableModel)proctable.getModel().removeTableModelListener(proctable)
                        DefaultTableModel model = (DefaultTableModel) proctable.getModel();
                        model.removeRow(row);

                        proctable.clearSelection();
                        row = -1;
                        pidnum = null;

                    }
                    else
                    {
                        String procname = (String) proctable.getValueAt(row, 0);
                        JOptionPane.showMessageDialog(null, "Tiến trình: \""+procname+ "\" hủy không thành công.");
                        proctable.clearSelection();
                        row = -1;
                        pidnum = null;
                    }
                    
                    cmdSocket.close();
                    
                }catch(IOException e){
                    
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MouseClick()
    {
        row = proctable.getSelectedRow();
        pidnum = (String) proctable.getValueAt(row, 1);
                
        /*
        proctable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                row = proctable.getSelectedRow();
                pidnum = (String) proctable.getValueAt(row, 1);
            }
        });
        */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable proctable;
    // End of variables declaration//GEN-END:variables
}
